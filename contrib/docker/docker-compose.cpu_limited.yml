version: "3.4"

x-ckan: &ckan_app
  container_name: ckan
  image: cioos/ckan:${CKAN_TAG}
  links:
    - db
    - solr
    - redis
  ports:
    - "0.0.0.0:${CKAN_PORT}:5000"
  env_file:
      - .env
  environment:
    # Defaults work with linked containers, change to use own Postgres, SolR, Redis or Datapusher
    CKAN_SQLALCHEMY_URL: postgresql://ckan:${POSTGRES_PASSWORD}@db/ckan
    CKAN_DATASTORE_WRITE_URL: postgresql://ckan:${POSTGRES_PASSWORD}@db/datastore
    CKAN_DATASTORE_READ_URL: postgresql://datastore_ro:${DATASTORE_READONLY_PASSWORD}@db/datastore
    DS_RO_PASS: ${DATASTORE_READONLY_PASSWORD}
    # Debug with pdb (example) - Interact with `docker attach $(docker container ls -qf name=ckan)`
    #command: 'python -m pdb /usr/lib/ckan/venv/bin/ckan --config /srv/app/ckan.ini run --host 0.0.0.0 --passthrough-errors'
    #tty: true
    #stdin_open: true
  restart: unless-stopped
  volumes:
    - "/etc/localtime:/etc/localtime:ro" # remove and use TZ setting if running on windows
    - ckan_home:/srv/app
    - ckan_storage:/var/lib/ckan
    - ${CKAN_LOG_PATH}:/srv/app/logs

volumes:
  ckan_home:
  ckan_storage:
  pg_data:
  solr_data:
  redis_data:

services:
  ckan:
    <<: *ckan_app
    build:
      context: ../../
      args:
        - CKAN_SITE_URL=${CKAN_SITE_URL}
    volumes:
      - "/etc/localtime:/etc/localtime:ro" # remove and use TZ setting if running on windows
      - ckan_home:/srv/app
      - ckan_storage:/var/lib/ckan
      - ${CKAN_LOG_PATH}:/srv/app/logs
      - ./ckan-entrypoint.sh:/docker-entrypoint.d/ckan-entrypoint.sh
    deploy:
      resources:
        limits:
          cpus: '${LIMIT_CPU_CKAN:-0.5}'
    depends_on:
      db:
        condition: service_healthy
      solr:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5000/api/3/action/status_show || exit 1"]
      start_period: 15s
      interval: 60s
      timeout: 5s
      retries: 5  

  ckan_gather_harvester:
    <<: *ckan_app
    container_name: ckan_gather_harvester
    user: ckan
    command: ckan --config=/srv/app/ckan.ini harvester gather-consumer
    ports: []
    volumes:
    - "/etc/localtime:/etc/localtime:ro" # remove and use TZ setting if running on windows
    - ckan_home:/srv/app
    - ckan_storage:/var/lib/ckan
    - ${CKAN_LOG_PATH}:/srv/app/logs
    - ./ckan-harvester-entrypoint.sh:/docker-entrypoint.d/ckan-harvester-entrypoint.sh
    deploy:
      resources:
        limits:
          cpus: '${LIMIT_CPU_CKAN_GATHER_HARVESTER:-0.25}'    
    depends_on:
      ckan:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "ps -o args | grep -q 'harvester gather-consumer'"]
      start_period: 5s
      interval: 60s
      timeout: 5s
      retries: 1   

  ckan_fetch_harvester:
    <<: *ckan_app
    container_name: ckan_fetch_harvester
    user: ckan
    command: ckan --config=/srv/app/ckan.ini harvester fetch-consumer
    ports: []
    volumes:
    - "/etc/localtime:/etc/localtime:ro" # remove and use TZ setting if running on windows
    - ckan_home:/srv/app
    - ckan_storage:/var/lib/ckan
    - ${CKAN_LOG_PATH}:/srv/app/logs
    - ./ckan-harvester-entrypoint.sh:/docker-entrypoint.d/ckan-harvester-entrypoint.sh
    deploy:
      resources:
        limits:
          cpus: '${LIMIT_CPU_CKAN_FETCH_HARVESTER:-0.5}'      
    depends_on:
      ckan:
        condition: service_healthy
      ckan_gather_harvester:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "ps -o args | grep -q 'harvester fetch-consumer'"]
      start_period: 5s
      interval: 60s
      timeout: 5s
      retries: 1  

  ckan_run_harvester:
    <<: *ckan_app
    container_name: ckan_run_harvester
    user: root
    command: /bin/bash -c "echo 'ckan_run_harvester started' && crond -f 2>&1 "
    ports: []
    volumes:
    - ./ckan-run-harvester-entrypoint.sh:/docker-entrypoint.d/ckan-run-harvester-entrypoint.sh
    deploy:
      resources:
        limits:
          cpus: '${LIMIT_CPU_CKAN_RUN_HARVESTER:-0.25}'
    depends_on:
      ckan:
        condition: service_healthy
      ckan_gather_harvester:
        condition: service_started
      ckan_fetch_harvester:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "ps -o args | grep -q '^crond -f'"]
      start_period: 5s
      interval: 60s
      timeout: 5s
      retries: 1  

  datapusher:
    container_name: datapusher
    image: clementmouchet/datapusher
    restart: unless-stopped
    ports:
      - "8800:8800"
    deploy:
      resources:
        limits:
          cpus: '${LIMIT_CPU_DATAPUSHER:-0.25}'

  db:
    container_name: db
    image: cioos/postgresql:latest
    env_file:
      - .env
    ports:
       - "5432:5432"
    environment:
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - "/etc/localtime:/etc/localtime:ro" # remove and use TZ setting if running on windows
      - pg_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '${LIMIT_CPU_DB:-0.5}'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ckan"]

  solr:
    container_name: solr
    image: cioos/solr:latest
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "8983:8983"
    volumes:
      - solr_data:/var/solr
    deploy:
      resources:
        limits:
          cpus: '${LIMIT_CPU_SOLR:-1.0}'
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8983/solr/ckan/admin/ping?wt=json |  grep -iq '\"status\":\"OK\"' || exit 1"]
      start_period: 15s
      interval: 10s
      timeout: 5s
      retries: 3

  # redis is used by the datapusher and the spatial fetch and gather harvesters
  redis:
    container_name: redis
    image: redis:latest
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '${LIMIT_CPU_REDIS:-0.25}'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
