# docker-compose build && docker-compose up -d
# If "docker-compose logs ckan" shows DB not ready, run "docker-compose restart ckan" a few times.
version: "3.4"

x-ckan: &ckan_app
  container_name: ckan
  image: docker_ckan
  links:
    - db
    - solr
    - redis
    # - pycsw
  ports:
    - "0.0.0.0:${CKAN_PORT}:5000"
  environment:
    # Defaults work with linked containers, change to use own Postgres, SolR, Redis or Datapusher
    - CKAN_SQLALCHEMY_URL=postgresql://ckan:${POSTGRES_PASSWORD}@db/ckan
    - CKAN_DATASTORE_WRITE_URL=postgresql://ckan:${POSTGRES_PASSWORD}@db/datastore
    - CKAN_DATASTORE_READ_URL=postgresql://datastore_ro:${DATASTORE_READONLY_PASSWORD}@db/datastore
    - CKAN_SOLR_URL=http://solr:8983/solr/ckan
    - CKAN_REDIS_URL=redis://redis:6379/1
    - CKAN_DATAPUSHER_URL=http://datapusher:8800
    - CKAN_SITE_URL=${CKAN_SITE_URL}
    - CKAN_MAX_UPLOAD_SIZE_MB=${CKAN_MAX_UPLOAD_SIZE_MB}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
    #- TZ=Canada/Vancouver
  #restart: always
  volumes:
    - "/etc/localtime:/etc/localtime:ro"
    - ckan_config:/etc/ckan
    - ckan_home:/usr/lib/ckan
    - ckan_storage:/var/lib/ckan
    - ${CKAN_LOG_PATH}:/usr/lib/ckan/venv/src/ckanlog.log

x-ckan_build: &ckan_build
    build:
      context: ../../
      args:
          - CKAN_SITE_URL=${CKAN_SITE_URL}
volumes:
  ckan_config:
  ckan_home:
  ckan_storage:
  pg_data:


services:
  ckan:
    depends_on:
      - db
    <<: *ckan_app
    <<: *ckan_build

  ckan_gather_harvester:
     <<: *ckan_app
     container_name: ckan_gather_harvester
     image: docker_ckan
     entrypoint: /ckan-harvester-entrypoint.sh
     user: root
     command: ckan-paster --plugin=ckanext-harvest harvester gather_consumer -c /etc/ckan/production.ini
     ports: []
     depends_on:
       - ckan

  ckan_fetch_harvester:
     <<: *ckan_app
     container_name: ckan_fetch_harvester
     image: docker_ckan
     entrypoint: /ckan-harvester-entrypoint.sh
     user: root
     command: ckan-paster --plugin=ckanext-harvest harvester fetch_consumer -c /etc/ckan/production.ini
     ports: []
     depends_on:
       - ckan
       - ckan_gather_harvester

  ckan_run_harvester:
     <<: *ckan_app
     container_name: ckan_run_harvester
     image: docker_ckan
     entrypoint: /ckan-run-harvester-entrypoint.sh
     user: root
     command: /bin/bash -c "echo 'ckan_run_harvester started' && cron -f 2>&1 "
     ports: []
     depends_on:
       - ckan
       - ckan_gather_harvester
       - ckan_fetch_harvester

  datapusher:
    container_name: datapusher
    image: clementmouchet/datapusher
    #restart: always
    ports:
      - "8800:8800"

  db:
    container_name: db
    image: docker_db
    ports:
       - "5432:5432"
    build:
      context: ../../
      dockerfile: contrib/docker/postgresql/Dockerfile
      args:
        - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    environment:
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #restart: always
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - pg_data:/var/lib/postgresql/data

  solr:
    container_name: solr
    build:
      context: ../../
      dockerfile: contrib/docker/solr/Dockerfile
    #restart: always

  redis:
    container_name: redis
    image: redis:latest
    #restart: always

  # pycsw:
  #   container_name: pycsw
  #   image: geopython/pycsw
  #   ports:
  #     - "8000:8000"
  #   restart: always
  #   volumes:
  #     - ./pycsw/pycsw.cfg:/etc/pycsw/pycsw.cfg
